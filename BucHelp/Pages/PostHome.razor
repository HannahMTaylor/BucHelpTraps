@page "/posthome/{UserId:int}/{PageNumber:int}"
@using BucHelp.Data
@using System.Web
@using System.Text.RegularExpressions;
<!--Need to inject the Question singleton-->
@inject Question question
@using BucHelp.Pages
@inject NavigationManager NavManager
<PageTitle>PostHome</PageTitle>


<h3>Posts</h3>


@if (questions == null) //is this really needed???? -Hannah
{
    <p>No questions posted yet... </p>
}
else if (questions.Count() == 0)
{
    <p>No questions posted yet... </p>
}
else //could make this an else if to display the list of posted questions if the search bar isn't active or use a while active loop inside else to display the search bar items?? -Hannah's brainstorming for later
{
    <!--This is the acutal search box, variable name 'SearchTerm'-->
    <input style="width: 30rem; height: 2.1rem; position: relative; top: 20px; left: 375px; margin: -25px 0 0 -25px;" @bind="SearchTerm" @bind:event="oninput" placeholder="Search.." />

    <!--This is the search box clear button, trigger 'ClearClick' method-->
    <button class="btn btn-searchbar" type="button" onclick="@ClearClick" style="position: relative; top: 31px; left: 410px; margin: -25px 0 0 -25px;">Clear</button>

    <br>

    <!--Shows the total returned number of results by counting the number in the FilteredSearch List-->
    <span class="text-muted ml-5" style=" position: relative; top: 35px; left: 550px; margin: -25px 0 0 -25px;">
        Total @FilteredSearch.Count Results Returned
    </span>

    <br>
    <br>
    <br>

    @code {
    // called after page rendered, so navigation should be safe now
    protected override void OnAfterRender(bool firstRender)
    {
        if (OldFilteredCount != FilteredSearch.Count())
        {
            // size changed out from under us, fix page back to 1
            //Console.WriteLine($"Count mismatch forced redraw: old: {OldFilteredCount}, new: {FilteredSearch.Count()}");
            NavManager.NavigateTo($"/posthome/{UserIdPageContainer}/{pageNumberContainer}");
            OldFilteredCount = FilteredSearch.Count();
        }
    }
}

    <!--Lists each object name from the FilteredSearch list on the page in a list-->
    //this was in a ul tag

        @if (PageNumber == 0)
        {
            @for (int j = 0; j < PageNumber + pageSize; j++) //displays a specific number of objects per page
            {
                //var q = FilteredSearch[j]; //out of bounds exception being thrown
                @if (j < @FilteredSearch.Count())
                {
                    var q = FilteredSearch[j];
                <div class="card card-body" style="width: 60rem;" @onclick="() =>  OnClick(q)">
                        <p>@FilteredSearch[j].Title</p>
                        <p style="margin-left: 25px;">@FilteredSearch[j].Description</p>
                        <p style="margin-left: 25px;">@FilteredSearch[j].Answer</p>
                    </div>
                }
            }
        }
        else
        {
            @for (int j = (PageNumber - 1) * pageSize; j < PageNumber * pageSize; j++) //displays a specific number of objects per page
            {
                
                @if (j < @FilteredSearch.Count())
                {
                    var q = FilteredSearch[j];
                    <div class="col-10 card card-body" @onclick="() =>  OnClick(q)">
                        <p>@FilteredSearch[j].Title</p>
                        <p style="margin-left: 25px;">@FilteredSearch[j].Description</p>
                        <p style="margin-left: 25px;">@FilteredSearch[j].Answer</p>
                    </div>
                }
            }
        }

    

    <!--numbered page buttons at the end of the page-->
    <div id="buttonstuff">
        @if (PageNumber == 0 && (@FilteredSearch.Count) > 0)
        {
            <span style="position: relative; top: 80%; left: 300px;">
                <!--<a class="btn btn-SearchPageBtn" href="searchbar/@(PageNumber+1)"> @(PageNumber + 1) </a> -->
                <u>@(PageNumber + 1)</u>
                @if (@FilteredSearch.Count() > 10)
                {
                    <a class="btn btn-SearchPageBtn" href="posthome/@UserIdPageContainer/@(PageNumber+2)"> Next </a>
                }
            </span>
        }
        else if (FilteredSearch.Count() > 0)
        {
            if ((@FilteredSearch.Count / pageSize) >= PageNumber)
            {
                <span style="position: relative; top: 80%; left: 250px;">
                    <a class="btn btn-SearchPageBtn" href="posthome/@UserIdPageContainer/@(PageNumber-1)"> Back </a>
                    <!--<a class="btn btn-SearchPageBtn" href="searchbar/@(PageNumber)"> @(PageNumber) </a> -->
                    <u>@PageNumber</u>
                    @if (@FilteredSearch.Count() >= (10 * @PageNumber + 1)) //logic fixed for adding new pages based on question submission
                    {
                        <a class="btn btn-SearchPageBtn" href="posthome/@UserIdPageContainer/@(PageNumber+1)"> Next </a>
                    }
                </span>
            }
            else
            {
                <span style="position: relative; top: 80%; left: 250px;">
                    <a class="btn btn-SearchPageBtn" href="posthome/@UserIdPageContainer/@(PageNumber-1)"> Back </a>
                    <u>@PageNumber</u>
                </span>
            }
        }
    </div>
        

}

    


@code {
    <!-- Need an object to hold questions in the data folder, possibly referenced here for manipulation in the html-->

    private List<Question>? questions;

    
    

    <!-- keeping this for debugging sake -- from either questionsOnPostpage or answers-page -->
    //private static  List<Question>? questions;
    Question selected = new Question();

    [Parameter]
    public int UserID { get; set; } //Session variable will be unique to the User

    public int UserIdPageContainer;

    //QuestionObjService QuestionService = new QuestionObjService();  //necessary to get rid of a static object reference error on the GetPostedQuestionsAsync() method

  
    <!-- On page initialization asynchronously get the list of posted questions and save it to local variable questions-->
    protected override async Task OnInitializedAsync() 
    {

        UserIdPageContainer = UserID;
        pageNumberContainer = PageNumber;

        questions = await QuestionObjService.GetPostedQuestionsAsync(); // Gets the question list and sets the questionslist on that page to this list for now.    

    }

    /// <summary>
    /// Once card is clicked will take the question object and use its title
    /// to set the new page, but if two questions have the same title they will
    /// both display.  Once DB connections are made this could be the ID
    /// </summary>
    /// <param name="question"></param>
    protected async void OnClick(Question question)
    {
        selected = question;
        NavManager.NavigateTo($"/QuestionView/{selected.QuestionID}");
    }




    //SearchBar code

    private int pageSize = 10; //can change number of objects on page

    [Parameter]
    public int PageNumber { get; set; } //allows changes with buttons

    public int pageNumberContainer;

    //creates a new list of SearchItem objects
    List<SearchItem> FilteredSearch2 = new List<SearchItem> { };

    //creates a SearchItem object with Name only as of now (update later)
    public class SearchItem
    {
        public string? Name { get; set; }
    }

    private int OldFilteredCount = 0;

    // Initialize SearchTerm to "" to prevent null's
    private string SearchTerm { get; set; } = "";


    //clears the search bar after clear button is pressed
    private void ClearClick()
    {
        SearchTerm = "";
        this.FilteredSearch2 = new List<SearchItem> { }; //clears object list
    }

    protected void OnChange()
    {
        NavManager.NavigateTo($"/posthome/{UserIdPageContainer}/{pageNumberContainer}"); //trying to change the navigation to redirect to the posthome page since we are moving the search bar and list of posted questions pages into a single page

    }

    //filtering stored in new FilteredSearch variable where SearchItem is in listed object
    //changed this to search on the list of posted questions -- hannah
    List<Question> FilteredSearch => questions.Where(i => i.Title.ToLower().Contains(SearchTerm.ToLower())).ToList();
} <!-- end code section -->
