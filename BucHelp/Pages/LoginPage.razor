@page "/"
@layout EmptyLayout
@inject NavigationManager navigationManager
@inject AppState AppState
@inject NavUtil navUtil

@using Data

@*@{
    Layout = null;
}*@

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<!--Html code for the Login/Password/Log in button.-->
<div class= "container border pt-3" style="padding:20px">
    <form method="post">
        <div class="text-danger" asp-validation-summary="ModelOnly"></div>
        <div class="form-group row">
            <div class="col-2">
                <label asp-for="Credential.Email"><sup class="star" style="color:red">*</sup>Email</label>
            </div>
            <div class="col-5">
                <input type="email" pattern="[a-zA-Z0-9._%-+]+@("@")[a-zA-Z]+\.[a-z]{2,3}$" maxlength="100" asp-for="login.Credential.Email" class="form-control" required @bind="email" />
                @if (emailError)
                {
                    <label asp-for="Credential.Password" style="color:red">Error Invalid Email Format</label>
                }
            </div>
            <span class="text-danger" asp-validation-for="login.Credential.UserName"></span>
        </div>
        <div class="form-group row">
            <div class="col-2">
                <label asp-for="Credential.Password"><sup class="star" style="color:red">*</sup>Password</label>
            </div>
            <div class="col-5">
                <input type="password" maxlength="100" asp-for="login.Credential.Password" class="form-control" required @bind="password" />
                @if (error)
                {
                    <label asp-for="Credential.Password" style="color:red">Error Incorrect Email or Password</label>
                }
            </div>
            <span class="text-danger" asp-validation-for="login.Credential.Password"></span>
        </div>
        
        <br />
        <div class="form-group row">
            <div calss="col-2">
                <input type="Log In" class="btn btn-primary" value="Login" @onclick="submit" />
            </div>
        </div>
    </form>
</div>
<!--End of html code.-->

@code {

    LoginModel login = new LoginModel();
    User newUser = new User();

    private List<User>? users;



    bool error = false;
    bool emailError = false;
    bool errorMessageSaved = false;
    bool canNavigate = false;
    string email;
    string password;
    int i = 0;

    protected async void submit(MouseEventArgs mouseEventArgs)
    {

        //navigationManager.NavigateTo($"/posthome/{newUser.UserId}/1"); //revert these changes and comments before pushing!!!!
        //newUser = login.GetUser(email);


        foreach(User u in users)
        {
            if (u.Password == password)
            {

                login.Credential.Email = email;
                login.Credential.Password = password;

                //Logic for adding to storage goes here
                //Resource used to do this below
                //https://stackoverflow.com/questions/67938642/blazor-server-how-to-persist-data-across-multiple-tabs-and-refreshes
                if (login.Credential.isValidEmail() && !string.IsNullOrWhiteSpace(login.Credential.Password) && u != null)
                {
                    newUser = login.GetUser(email);


                    emailError = false;

                    if (email.ToLower().Equals(u.Email.ToLower()) && password.Equals(u.Password))
                    {
                        AppState.LoggedIn = true;
                        canNavigate = true;
                        navUtil.SetID(u.UserId); //Once logged in set the ID
                        error = false;
                    }
                    else
                    {
                        error = true;
                    }
                }
                else
                {
                    error = true;
                    if (!login.Credential.isValidEmail())
                    {
                        emailError = true;
                    }
                    else
                    {
                        emailError = false;  
                    }
                }

                // Navigation logic

                if (canNavigate)
                {
                    navigationManager.NavigateTo($"/posthome/{u.UserId}/1"); //navigate to the post page once submitted
                }
            }          
            else if(!errorMessageSaved)
            {
                login.Credential.Email = email;
                error = true;
                if (!login.Credential.isValidEmail())
                {
                    emailError = true;
                }
                else
                {
                    emailError = false;
                    errorMessageSaved = true;
                }
            }
        }
        errorMessageSaved = false;
    }

       

    protected override async Task OnInitializedAsync()
    {
        users = await UserObjService.GetUserAsync(); // Gets the user list and sets the userlist on that page to this list for now.
    }

}
